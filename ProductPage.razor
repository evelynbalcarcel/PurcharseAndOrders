@page "/product"
@using BlazorPurchaseOrders.Data
@inject IProductService ProductService
@using Syncfusion.Blazor.Navigations

@attribute [Authorize(Roles = "Admin, Manager")]

<h3>Product </h3>
<br />


<SfGrid DataSource="@product"
        Toolbar="@Toolbaritems"
        AllowResizing="true">
    <GridColumns>
        <GridColumn Field="@nameof(Product.ProductCode)"
                    HeaderText="Code"
                    TextAlign="TextAlign.Left"
                    Width="40">
        </GridColumn>
        <GridColumn Field="@nameof(Product.ProductDescription)"
                    HeaderText="Descripcion"
                    TextAlign="TextAlign.Left"
                    Width="60">
        </GridColumn>
        <GridColumn Field="@nameof(Product.ProductUnitPrice)"
                    HeaderText="Unit Prace"
                    TextAlign="TextAlign.Right"
                    Format="N2"
                    Width="40">
        </GridColumn>

        <GridColumn Field="@nameof(Product.SupplierName)"
                    HeaderText="Supplier"
                    TextAlign="TextAlign.Left"
                    Width="60">
        </GridColumn>

    </GridColumns>
    <GridEvents RowSelected="RowSelectHandler" OnToolbarClick="ToolbarClickHandler" TValue="Product"></GridEvents>
</SfGrid>

<SfDialog @ref="DialogAddEditProduct"
          IsModal="true"
          Width="500px"
          ShowCloseIcon="true"
          Visible="@DialogVisible"
          VisibleChanged="OnVisibleChanged">

    <DialogTemplates>
        <Header> @HeaderText </Header>
    </DialogTemplates>
    <EditForm Model="@addeditProduct" OnValidSubmit="@ProductSave">
        <DataAnnotationsValidator />
        <div>
            <SfTextBox Enabled="true" Placeholder="Product Code"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditProduct.ProductCode"></SfTextBox>
            <ValidationMessage For="@(() => addeditProduct.ProductCode)" />

            <SfTextBox Enabled="true" Placeholder="Description"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditProduct.ProductDescription"></SfTextBox>
            <ValidationMessage For="@(() => addeditProduct.ProductDescription)" />

            <SfNumericTextBox Enabled="true" Placeholder="Unit Price"
                              FloatLabelType="@FloatLabelType.Auto"
                              ShowSpinButton=false
                              @bind-Value="addeditProduct.ProductUnitPrice"></SfNumericTextBox>

            <SfDropDownList DataSource="@supplier"
                            TItem="Supplier"
                            TValue="int"
                            Text="SupplierID"
                            @bind-Value="addeditProduct.ProductSupplierID"
                            FloatLabelType="@FloatLabelType.Auto"
                            Placeholder="Select a Supplier"
                            Enabled="true">
                <DropDownListFieldSettings Text="SupplierName" Value="SupplierID"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
        <br /><br />
        <div class="e-footer-content">
            <div class="button-container">
                <button type="submit" class="e-btn e-normal e-primary">Save</button>
                <button type="button" class="e-btn e-normal" @onclick="@CloseDialog">Cancel</button>
            </div>
        </div>
    </EditForm>
</SfDialog>

<SfDialog @ref="DialogDeleteProduct"
          IsModal="true"
          Width="500px"
          ShowCloseIcon="true"
          Visible="@DialogDeleteVisible"
          VisibleChanged="OnDeleteVisibleChanged">

    <DialogTemplates>
        <Header> Confirm Delete </Header>
        <Content>
            <SfTextBox Enabled="false" Placeholder="Product Code"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditProduct.ProductCode"></SfTextBox>
            <SfTextBox Enabled="false" Placeholder="Description"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditProduct.ProductDescription"></SfTextBox>
            <SfNumericTextBox Enabled="false" Placeholder="Unit Price"
                              FloatLabelType="@FloatLabelType.Auto"
                              @bind-Value="addeditProduct.ProductUnitPrice"></SfNumericTextBox>
            <SfDropDownList DataSource="@supplier"
                            TItem="Supplier"
                            TValue="int"
                            Text="SupplierID"
                            @bind-Value="addeditProduct.ProductSupplierID"
                            FloatLabelType="@FloatLabelType.Auto"
                            Placeholder="Select a Supplier"
                            Enabled="false">
                <DropDownListFieldSettings Text="SupplierName" Value="SupplierID"></DropDownListFieldSettings>
            </SfDropDownList>
            <br />
            <br />
            <span class="text-danger">Please confirm that you want to delete this record</span>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Delete" IsPrimary="true" OnClick="@ConfirmDeleteYes" />
        <DialogButton Content="Cancel" IsPrimary="false" OnClick="@ConfirmDeleteNo" />
    </DialogButtons>
</SfDialog>

<WarningPage @ref="Warning" WarningHeaderMessage="@WarningHeaderMessage" WarningContentMessage="@WarningContentMessage" />


@code {

    public int SelectedProductId { get; set; } = 0;
    WarningPage Warning;
    string WarningHeaderMessage = "";
    string WarningContentMessage = "";


    bool DialogVisible = false;
    bool DialogDeleteVisible = false;


    IEnumerable<Product> product;
    IEnumerable<Supplier> supplier;
    private List<ItemModel> Toolbaritems = new List<ItemModel>();

    SfDialog DialogAddEditProduct;
    SfDialog DialogDeleteProduct;

    Product addeditProduct = new Product();
    string HeaderText = "";

    protected override async Task OnInitializedAsync()
    {
        //Populate the list of VAT objects from the VAT table.
        product = await ProductService.ProductList();

        Toolbaritems.Add(new ItemModel() { Text = "Add", TooltipText = "Add a new Product Rate", PrefixIcon = "e-add" });
        Toolbaritems.Add(new ItemModel() { Text = "Edit", TooltipText = "Edit selected Product Rate", PrefixIcon = "e-edit" });
        Toolbaritems.Add(new ItemModel() { Text = "Delete", TooltipText = "Delete selected Product Rate", PrefixIcon = "e-delete" });
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Add")
        {
            //Code for adding goes here
            addeditProduct = new Product();             // Ensures a blank form when adding
            HeaderText = "Add Product";
            DialogVisible = true;

        }
        if (args.Item.Text == "Edit")
        {
            if (SelectedProductId == 0)
            {
                WarningHeaderMessage = "Warning!";
                WarningContentMessage = "Please select a Product Rate from the grid.";
                Warning.OpenDialog(); //

            }
            else
            {
                // Cargar los datos del impuesto a editar
                HeaderText = "Edit Product";
                addeditProduct = await ProductService.Product_GetOne(SelectedProductId);

                // Mostrar el diálogo
                DialogVisible = true;
            }
        }

        if (args.Item.Text == "Delete")
        {
            if (SelectedProductId == 0)
            {
                WarningHeaderMessage = "Warning!";
                WarningContentMessage = "Please select a Product Rate from the grid.";
                Warning.OpenDialog();
            }
            else
            {
                HeaderText = "Delete Product";
                addeditProduct = await ProductService.Product_GetOne(SelectedProductId);
                DialogDeleteVisible = true;
            }
        }

    }

    protected async Task ProductSave()
    {
        if (addeditProduct.ProductID == 0)
        {
            int Success = await ProductService.ProductInsert(
                addeditProduct.ProductCode,
                addeditProduct.ProductDescription,
                addeditProduct.ProductUnitPrice,
                addeditProduct.ProductSupplierID);
            if (Success != 0)
            {
                //Product Rate already exists
                WarningHeaderMessage = "Warning!";
                WarningContentMessage = "This Product Description already exists; it cannot be added again.";
                Warning.OpenDialog();
                // Data is left in the dialog so the user can see the problem.
            }
            else
            {
                // Clears the dialog and is ready for another entry
                // User must specifically close or cancel the dialog
                addeditProduct = new Product();
            }
        }
        else
        {
            // Item is being edited
            int Success = await ProductService.ProductUpdate(
                SelectedProductId,
                addeditProduct.ProductCode,
                addeditProduct.ProductDescription,
                addeditProduct.ProductUnitPrice,
                addeditProduct.ProductSupplierID,
                addeditProduct.ProductIsArchived);
            if (Success != 0)
            {
                //Product Rate already exists
                WarningHeaderMessage = "Warning!";
                WarningContentMessage = "This Product Description already exists; it cannot be added again.";
                Warning.OpenDialog();
            }
            else
            {
                DialogVisible = false;
                this.StateHasChanged();
                addeditProduct = new Product();
                SelectedProductId = 0;
            }
        }

        //Always refresh datagrid
        product = await ProductService.ProductList();
        StateHasChanged();
    }


    private void CloseDialog()
    {
        DialogVisible = false;

    }

    private void OnVisibleChanged(bool value)
    {
        DialogVisible = value;
    }

    public void RowSelectHandler(RowSelectEventArgs<Product> args)
    {
        //{args.Data} returns the current selected records.
        SelectedProductId = args.Data.ProductID;
    }
    private void OnDeleteVisibleChanged(bool value)
    {
        DialogDeleteVisible = value;
    }

    public void ConfirmDeleteNo()
    {
        DialogDeleteVisible = false;
        SelectedProductId = 0;
        addeditProduct = new Product();
    }

    public async Task ConfirmDeleteYes()
    {
        // Aquí estás haciendo un "soft delete" archivando el impuesto
        int Success = await ProductService.ProductUpdate(
            SelectedProductId,
            addeditProduct.ProductCode,
            addeditProduct.ProductDescription,
            addeditProduct.ProductUnitPrice,
            addeditProduct.ProductSupplierID,
            addeditProduct.ProductIsArchived = true);

        if (Success != 0)
        {
            //Product Rate already exists
            WarningHeaderMessage = "Warning!";
            WarningContentMessage = "Se ha preducido un error desconocido - El registro no se ha eliminado!";
            Warning.OpenDialog();
        }
        else
        {
            DialogDeleteVisible = false;
            product = await ProductService.ProductList();
            addeditProduct = new Product();
            SelectedProductId = 0;
            StateHasChanged();
        }


    }

}