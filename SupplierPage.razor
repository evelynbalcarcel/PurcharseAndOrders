@page "/supplier"
@using BlazorPurchaseOrders.Data
@inject ISupplierService SupplierService
@using Syncfusion.Blazor.Navigations

@attribute [Authorize(Roles = "Admin, Manager")]

<h3>Supplier </h3>
<br />

<SfGrid DataSource="@supplier"
        Toolbar="@Toolbaritems"
        AllowResizing="true">
    <GridColumns>
        <GridColumn Field="@nameof(Supplier.SupplierName)"
                    HeaderText="Supplier Name"
                    TextAlign="TextAlign.Left"
                    Width="30">
        </GridColumn>
        <GridColumn Field="@nameof(Supplier.CombinedAddress)"
                        HeaderText="Addres"
                        TextAlign="TextAlign.Left"
                        Width="60">
        </GridColumn>
        <GridColumn Field="@nameof(Supplier.SupplierEmail)"
                    HeaderText="Email"
                    TextAlign="TextAlign.Left"
                    Width="60">
        </GridColumn>
        
    </GridColumns>
    <GridEvents RowSelected="RowSelectHandler" OnToolbarClick="ToolbarClickHandler" TValue="Supplier"></GridEvents>
</SfGrid>

<SfDialog @ref="DialogAddEditSupplier"
          IsModal="true"
          Width="500px"
          ShowCloseIcon="true"
          Visible="@DialogVisible"
          VisibleChanged="OnVisibleChanged">

    <DialogTemplates>
        <Header> @HeaderText </Header>
    </DialogTemplates>
    <EditForm Model="@addeditSupplier" OnValidSubmit="@SupplierSave">
        <DataAnnotationsValidator />
        <div>
            <SfTextBox Enabled="true" Placeholder="Supplier Name"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierName"></SfTextBox>
            <ValidationMessage For="@(() => addeditSupplier.SupplierName)" />
            <SfTextBox Enabled="true" Placeholder="Address"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierAddress1"></SfTextBox>
            <ValidationMessage For="@(() => addeditSupplier.SupplierAddress1)" />
            <SfTextBox Enabled="true" Placeholder=""
                       FloatLabelType="@FloatLabelType.Never"
                       @bind-Value="addeditSupplier.SupplierAddress2"></SfTextBox>
            <ValidationMessage For="@(() => addeditSupplier.SupplierAddress2)" />
            <SfTextBox Enabled="true" Placeholder=""
                       FloatLabelType="@FloatLabelType.Never"
                       @bind-Value="addeditSupplier.SupplierAddress3"></SfTextBox>
            <ValidationMessage For="@(() => addeditSupplier.SupplierAddress3)" />
            <SfTextBox Enabled="true" Placeholder="Post Code"
                       FloatLabelType="@FloatLabelType.Auto"
                       CssClass="ToUpperCase"
                       @bind-Value="addeditSupplier.SupplierPostCode"></SfTextBox>
            <ValidationMessage For="@(() => addeditSupplier.SupplierPostCode)" />
            <SfTextBox Enabled="true" Placeholder="Email"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierEmail"></SfTextBox>
            <ValidationMessage For="@(() => addeditSupplier.SupplierEmail)" />
        </div>
        <br /><br />
        <div class="e-footer-content">
            <div class="button-container">
                <button type="submit" class="e-btn e-normal e-primary">Save</button>
                <button type="button" class="e-btn e-normal" @onclick="@CloseDialog">Cancel</button>
            </div>
        </div>
    </EditForm>
</SfDialog>

<SfDialog @ref="DialogDeleteSupplier"
          IsModal="true"
          Width="500px"
          ShowCloseIcon="true"
          Visible="@DialogDeleteVisible"
          VisibleChanged="OnDeleteVisibleChanged">

    <DialogTemplates>
        <Header> Confirm Delete </Header>
        <Content>
            <SfTextBox Enabled="false" Placeholder="Name"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierName"></SfTextBox>

            <SfTextBox Enabled="false" Placeholder="Addres" Width="50"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierAddress1"></SfTextBox>

            <SfTextBox Enabled="false" Placeholder="" Width="50"
                       FloatLabelType="@FloatLabelType.Never"
                       @bind-Value="addeditSupplier.SupplierAddress2"></SfTextBox>

            <SfTextBox Enabled="false" Placeholder="" Width="50"
                       FloatLabelType="@FloatLabelType.Never"
                       @bind-Value="addeditSupplier.SupplierAddress3"></SfTextBox>

            <SfTextBox Enabled="false" Placeholder="Post Code" Width="50"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierPostCode"></SfTextBox>

            <SfTextBox Enabled="false" Placeholder="Email" Width="50"
                       FloatLabelType="@FloatLabelType.Auto"
                       @bind-Value="addeditSupplier.SupplierEmail"></SfTextBox>
           
            <br />
            <br />
            <span class="text-danger">Please confirm that you want to delete this record</span>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Delete" IsPrimary="true" OnClick="@ConfirmDeleteYes" />
        <DialogButton Content="Cancel" IsPrimary="false" OnClick="@ConfirmDeleteNo" />
    </DialogButtons>
</SfDialog>

<WarningPage @ref="Warning" WarningHeaderMessage="@WarningHeaderMessage" WarningContentMessage="@WarningContentMessage" />


@code {

    public int SelectedSupplierId { get; set; } = 0;
    WarningPage Warning;
    string WarningHeaderMessage = "";
    string WarningContentMessage = "";


    bool DialogVisible = false;
    bool DialogDeleteVisible = false;


    IEnumerable<Supplier> supplier;
    private List<ItemModel> Toolbaritems = new List<ItemModel>();

    SfDialog DialogAddEditSupplier;
    SfDialog DialogDeleteSupplier;

    Supplier addeditSupplier = new Supplier();
    string HeaderText = "";

    protected override async Task OnInitializedAsync()
    {
        //Populate the list of VAT objects from the VAT table.
        supplier = await SupplierService.SupplierList();

        Toolbaritems.Add(new ItemModel() { Text = "Add", TooltipText = "Add a new Supplier Rate", PrefixIcon = "e-add" });
        Toolbaritems.Add(new ItemModel() { Text = "Edit", TooltipText = "Edit selected Supplier Rate", PrefixIcon = "e-edit" });
        Toolbaritems.Add(new ItemModel() { Text = "Delete", TooltipText = "Delete selected Supplier Rate", PrefixIcon = "e-delete" });
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Add")
        {
            //Code for adding goes here
            addeditSupplier = new Supplier();             // Ensures a blank form when adding
            HeaderText = "Add Supplier Rate";
            DialogVisible = true;

        }
        if (args.Item.Text == "Edit")
        {
            if (SelectedSupplierId == 0)
            {
                WarningHeaderMessage = "Warning!";
                WarningContentMessage = "Please select a Supplier Rate from the grid.";
                Warning.OpenDialog(); //

            }
            else
            {
                // Cargar los datos del impuesto a editar
                HeaderText = "Edit Supplier Rate";
                addeditSupplier = await SupplierService.Supplier_GetOne(SelectedSupplierId);

                // Mostrar el diálogo
                DialogVisible = true;
            }
        }

        if (args.Item.Text == "Delete")
        {
            if (SelectedSupplierId == 0)
            {
                WarningHeaderMessage = "Warning!";
                WarningContentMessage = "Please select a Supplier Rate from the grid.";
                Warning.OpenDialog();
            }
            else
            {
                HeaderText = "Delete Supplier Rate";
                addeditSupplier = await SupplierService.Supplier_GetOne(SelectedSupplierId);
                DialogDeleteVisible = true;
            }
        }

    }

    protected async Task SupplierSave()
    {
        if (addeditSupplier.SupplierID == 0)
        {
            int Success = await SupplierService.SupplierInsert(addeditSupplier.SupplierName, 
                addeditSupplier.SupplierAddress1,
                addeditSupplier.SupplierAddress2,
                addeditSupplier.SupplierAddress3,
                addeditSupplier.SupplierPostCode,
                addeditSupplier.SupplierEmail);
            if (Success != 0)
            {
                //Supplier Rate already exists
                WarningHeaderMessage = "Warning!";
                WarningContentMessage = "This Supplier Description already exists; it cannot be added again.";
                Warning.OpenDialog();
                // Data is left in the dialog so the user can see the problem.
            }
            else
            {
                // Clears the dialog and is ready for another entry
                // User must specifically close or cancel the dialog
                addeditSupplier = new Supplier();
            }
        }
        else
        {
            // Item is being edited
            int Success = await SupplierService.SupplierUpdate(
                addeditSupplier.SupplierID,
                addeditSupplier.SupplierName,
                addeditSupplier.SupplierAddress1,
                addeditSupplier.SupplierAddress2,
                addeditSupplier.SupplierAddress3,
                addeditSupplier.SupplierPostCode,
                addeditSupplier.SupplierEmail,
                addeditSupplier.SupplierIsArchived);
            if (Success != 0)
            {
                //Supplier Rate already exists
                WarningHeaderMessage = "Warning!";
                WarningContentMessage = "This Supplier Description already exists; it cannot be added again.";
                Warning.OpenDialog();
            }
            else
            {
                DialogVisible = false;
                this.StateHasChanged();
                addeditSupplier = new Supplier();
                SelectedSupplierId = 0;
            }
        }

        //Always refresh datagrid
        supplier = await SupplierService.SupplierList();
        StateHasChanged();
    }


    private void CloseDialog()
    {
        DialogVisible = false;

    }

    private void OnVisibleChanged(bool value)
    {
        DialogVisible = value;
    }

    public void RowSelectHandler(RowSelectEventArgs<Supplier> args)
    {
        //{args.Data} returns the current selected records.
        SelectedSupplierId = args.Data.SupplierID;
    }
    private void OnDeleteVisibleChanged(bool value)
    {
        DialogDeleteVisible = value;
    }

    public void ConfirmDeleteNo()
    {
        DialogDeleteVisible = false;
        SelectedSupplierId = 0;
        addeditSupplier = new Supplier();
    }

    public async Task ConfirmDeleteYes()
    {
        // Aquí estás haciendo un "soft delete" archivando el impuesto
        int Success = await SupplierService.SupplierUpdate(
            addeditSupplier.SupplierID,
            addeditSupplier.SupplierName,
            addeditSupplier.SupplierAddress1,
            addeditSupplier.SupplierAddress2,
            addeditSupplier.SupplierAddress3,
            addeditSupplier.SupplierPostCode,
            addeditSupplier.SupplierEmail,
            addeditSupplier.SupplierIsArchived = true);

        if (Success != 0)
        {
            //Supplier Rate already exists
            WarningHeaderMessage = "Warning!";
            WarningContentMessage = "Se ha preducido un error desconocido - El registro no se ha eliminado!";
            Warning.OpenDialog();
        }
        else
        {
            DialogDeleteVisible = false;
            supplier = await SupplierService.SupplierList();
            addeditSupplier = new Supplier();
            SelectedSupplierId = 0;
            StateHasChanged();
        }


    }

}